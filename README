
This repository contains msh, a microshell developed as a school assignment for CS570 at SDSU. This microshell aims to conform to a subset of bash and supports UNIX style pipes as well as quoted strings. This is the rough BNF for the microshell:

line -> cmd
|	cmd PIPE line
cmd -> FILE ARG*
|	EXIT

A line is a command or a command piped to a line (recursively). A command is a file followed by any number of args, or it is the exit built-in. For a concrete example, this input line following the command prompt uses multiple pipes: login-name% ls -l | sort -fi | grep msh.c

The chief feature of this shell is the support for pipes. We recognize the UNIX philosophy of composing utility programs together by their input and output. Pipes can be used arbitrarily. Because bash allows pipes without whitespace separation, and we aim to conform, we have made the same design choice.

The main function works by printing a command prompt, waiting for a commandline, interpreting, printing output. These steps repeat by looping until the user enters "exit".

The function readAndInterpret does most of the work. This function reads one character at a time into linebuf in a format that seperates tokens by null bytes so they can be treated as C strings. A second buffer named argv collects these C strings for execution. The execution of commands is interleaved in reading the line. When a pipe character or the end of the line is encountered, the command is executed immediately. This function is monolithic and not modular. If the shell implemented more features, it should be rewritten with greater abstractions to include other built in shell functions such as cd, setenv, printenv, etc.


 
